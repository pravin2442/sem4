multiple instance install todo list 

Part 1: Backend Server Setup (Node.js API)

sudo yum update -y
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash 
source ~/.nvm/nvm.sh
nvm install --lts
mkdir todo-api && cd todo-api

npm init -y

npm install express cors
nano server.js
code
const express = require('express');
const cors = require('cors');
const app = express();
const port = 3000;

app.use(cors());
app.use(express.json());

let tasks = [
    { id: 1, text: 'Learn AWS EC2', completed: true },
    { id: 2, text: 'Setup Backend Server', completed: true },
    { id: 3, text: 'Setup Frontend Server', completed: false }
];
let nextId = 4;

app.get('/tasks', (req, res) => {
    res.json(tasks);
});

app.post('/tasks', (req, res) => {
    const taskText = req.body.text;
    if (!taskText) {
        return res.status(400).json({ error: 'Task text cannot be empty.' });
    }
    const newTask = {
        id: nextId++,
        text: taskText,
        completed: false
    };
    tasks.push(newTask);
    res.status(201).json(newTask);
});

app.listen(port, () => {
    console.log(`Todo API listening at http://localhost:${port}`);
});

run:
node server.js



Part 2: Frontend Server Setup (Nginx)
 cd /usr/share/nginx/html
sudo yum update -y
sudo dnf install nginx -y
sudo systemctl start nginx
sudo systemctl enable ngin

sudo nano /usr/share/nginx/html/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Cloud To-Do List</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="container">
        <h1>My Cloud To-Do List</h1>
        <div class="form">
            <input type="text" id="task-input" placeholder="Add a new task...">
            <button id="add-task-btn">Add Task</button>
        </div>
        <ul id="task-list"></ul>
    </div>
    <script src="app.js"></script>
</body>
</html>
 sudo nano /usr/share/nginx/html/style.css
body { font-family: sans-serif; background-color: #f4f4f4; }
.container { max-width: 600px; margin: 50px auto; background: #fff; padding: 20px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
h1 { text-align: center; }
.form { display: flex; margin-bottom: 20px; }
#task-input { flex-grow: 1; padding: 10px; border: 1px solid #ddd; }
#add-task-btn { padding: 10px; border: none; background: #337ab7; color: white; cursor: pointer; }
#task-list { list-style: none; padding: 0; }
#task-list li { padding: 10px; border-bottom: 1px solid #ddd; }
 sudo nano /usr/share/nginx/html/app.js
// !!! IMPORTANT: Replace this IP with your backend server's Public IP !!!
const BACKEND_URL = 'http://<YOUR_BACKEND_EC2_PUBLIC_IP>:3000';

const taskInput = document.getElementById('task-input');
const addTaskBtn = document.getElementById('add-task-btn');
const taskList = document.getElementById('task-list');

async function getTasks() {
    try {
        const response = await fetch(`${BACKEND_URL}/tasks`);
        const tasks = await response.json();
        taskList.innerHTML = '';
        tasks.forEach(task => {
            const li = document.createElement('li');
            li.textContent = task.text;
            taskList.appendChild(li);
        });
    } catch (error) {
        console.error('Failed to fetch tasks:', error);
    }
}

async function addTask() {
    const taskText = taskInput.value.trim();
    if (taskText === '') return;

    try {
        await fetch(`${BACKEND_URL}/tasks`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ text: taskText }),
        });
        taskInput.value = '';
        getTasks();
    } catch (error) {
        console.error('Failed to add task:', error);
    }
}

addTaskBtn.addEventListener('click', addTask);
document.addEventListener('DOMContentLoaded', getTasks);

sudo systemctl start nginx
sudo systemctl enable ngin

 sudo systemctl status nginx













































// Frentend 
Install and start Nginx

sudo yum update -y
sudo amazon-linux-extras install nginx1 -y
sudo systemctl start nginx
sudo systemctl enable nginx # To make it start on reboot
.........................................................................................................
Create your to-do list files. The default web root for Nginx on Amazon Linux is /usr/share/nginx/html. We need to create our files there.

Create index.html:.................................................
 sudo nano /usr/share/nginx/html/index.html
..............................................................................

source code index.html9()............
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Cloud To-Do List</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="container">
        <h1>My Cloud To-Do List</h1>
        <div class="form">
            <input type="text" id="task-input" placeholder="Add a new task...">
            <button id="add-task-btn">Add Task</button>
        </div>
        <ul id="task-list"></ul>
    </div>
    <script src="app.js"></script>
</body>
</html>
....................................................................................................
Create style.css: 
sudo nano /usr/share/nginx/html/style.css
....................................................................
code()

body { font-family: sans-serif; background-color: #f4f4f4; }
.container { max-width: 600px; margin: 50px auto; background: #fff; padding: 20px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
h1 { text-align: center; }
.form { display: flex; margin-bottom: 20px; }
#task-input { flex-grow: 1; padding: 10px; border: 1px solid #ddd; }
#add-task-btn { padding: 10px; border: none; background: #337ab7; color: white; cursor: pointer; }
#task-list { list-style: none; padding: 0; }
#task-list li { padding: 10px; border-bottom: 1px solid #ddd; }
.........................................................................................................................

Create app.js: sudo nano /usr/share/nginx/html/app.js

// !!! IMPORTANT: Replace this IP with your backend server's Public IP !!!
const BACKEND_URL = 'http://<YOUR_BACKEND_EC2_PUBLIC_IP>:3000'; ( here we want to enter the public ip) 

const taskInput = document.getElementById('task-input');
const addTaskBtn = document.getElementById('add-task-btn');
const taskList = document.getElementById('task-list');

// Function to fetch and display tasks
async function getTasks() {
    try {
        const response = await fetch(`${BACKEND_URL}/tasks`);
        const tasks = await response.json();
        taskList.innerHTML = ''; // Clear the list
        tasks.forEach(task => {
            const li = document.createElement('li');
            li.textContent = task.text;
            taskList.appendChild(li);
        });
    } catch (error) {
        console.error('Failed to fetch tasks:', error);
    }
}

// Function to add a new task
async function addTask() {
    const taskText = taskInput.value.trim();
    if (taskText === '') return;

    try {
        await fetch(`${BACKEND_URL}/tasks`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ text: taskText }),
        });
        taskInput.value = ''; // Clear input field
        getTasks(); // Refresh the list
    } catch (error) {
        console.error('Failed to add task:', error);
    }
}

// Event Listeners
addTaskBtn.addEventListener('click', addTask);
document.addEventListener('DOMContentLoaded', getTasks);



After this start the website 














// Backend

.................................................
sudo yum update -y
.....................................................
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
. ~/.nvm/nvm.sh
..............................................

nvm install --lts
.................................................


3).

Create the API.

Create a project directory: mkdir todo-api && cd todo-api

Initialize a Node.js project: npm init -y

Install Express (a web framework) and CORS (for security): npm install express cors

Create the server file: nano server.js

..............................
past source code()
..............................
// server start 
node server.js
..............................



source code()->...........................

const express = require('express');
const cors = require('cors');
const app = express();

// The port number your API will listen on. 3000 is a standard choice for development.
const port = 3000;

// --- Middleware ---
// The cors() middleware is essential. It adds the necessary headers
// to allow your frontend (on a different IP) to make requests to this backend.
app.use(cors());

// The express.json() middleware allows your API to understand and
// parse incoming request bodies that are in JSON format.
app.use(express.json());


// --- In-Memory "Database" ---
// This is a simple array to store your tasks.
// Note: This data will be reset every time you restart your server.
let tasks = [
    { id: 1, text: 'Learn AWS EC2', completed: true },
    { id: 2, text: 'Setup Backend Server', completed: true },
    { id: 3, text: 'Setup Frontend Server', completed: false }
];
let nextId = 4; // To make sure new tasks get a unique ID


// --- API Routes (Endpoints) ---

// This route handles GET requests to /tasks
// It simply sends back the current list of tasks as JSON.
app.get('/tasks', (req, res) => {
    res.json(tasks);
});

// This route handles POST requests to /tasks
// It's used to add a new task to the list.
app.post('/tasks', (req, res) => {
    const taskText = req.body.text;

    // A simple check to make sure the frontend sent some text
    if (!taskText) {
        return res.status(400).json({ error: 'Task text cannot be empty.' });
    }

    const newTask = {
        id: nextId++, // Assign a unique ID and then increment the counter
        text: taskText,
        completed: false
    };

    tasks.push(newTask);

    // Respond with a "201 Created" status and send back the task that was just created.
    res.status(201).json(newTask);
});


// --- Start the Server ---
// This is the final step that starts the server and makes it
// listen for incoming requests on the port you defined.
app.listen(port, () => {
    console.log(`Todo API listening at http://localhost:${port}`);
});















how to run after shutdown 

Step 1: Start the Backend Server (The "Kitchen")
SSH into your backend EC2 instance.

Navigate to your project directory: cd todo-api

Start the Node.js application: node server.js

Wait for the confirmation: You must see Todo API listening at http://localhost:3000. This means the "kitchen" is open and ready for orders.

Step 2: Check the Frontend Server (The "Dining Room")
Your frontend server (Nginx) is a service, so it's usually already running. You just need to make sure.

SSH into your frontend EC2 instance.

Check the status of Nginx: sudo systemctl status nginx

If you see Active: active (running), you are good to go!

(If it's not running for some reason, just start it: sudo systemctl start nginx)

Step 3: Use the Application
Open your web browser and go to the public IP address of your frontend server.
